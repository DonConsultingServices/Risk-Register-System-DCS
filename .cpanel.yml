---
deployment:
  tasks:
    # Set deployment path for your subdomain
    - export DEPLOYPATH=/home/dcscom/public_html/register.dcs.com.na
    
    # Create deployment directory if it doesn't exist
    - /bin/mkdir -p $DEPLOYPATH
    
    # Copy Laravel application files (excluding sensitive/git files)
    - /bin/cp -R app $DEPLOYPATH/
    - /bin/cp -R bootstrap $DEPLOYPATH/
    - /bin/cp -R config $DEPLOYPATH/
    - /bin/cp -R database $DEPLOYPATH/
    - /bin/cp -R resources $DEPLOYPATH/
    - /bin/cp -R routes $DEPLOYPATH/
    - /bin/cp -R storage $DEPLOYPATH/
    - /bin/cp -R vendor $DEPLOYPATH/
    
    # Copy Laravel core files
    - /bin/cp artisan $DEPLOYPATH/
    - /bin/cp composer.json $DEPLOYPATH/
    - /bin/cp composer.lock $DEPLOYPATH/
    
    # Copy public folder contents to document root
    - /bin/cp -R public/* $DEPLOYPATH/
    
    # Set proper file permissions for Laravel
    - /bin/find $DEPLOYPATH -type d -exec /bin/chmod 755 '{}' \;
    - /bin/find $DEPLOYPATH -type f -exec /bin/chmod 644 '{}' \;
    
    # Set writable permissions for Laravel storage and cache
    - /bin/chmod -R 777 $DEPLOYPATH/storage
    - /bin/chmod -R 777 $DEPLOYPATH/bootstrap/cache
    
    # Install/update composer dependencies
    - cd $DEPLOYPATH && /usr/local/bin/php /usr/local/bin/composer install --no-dev --optimize-autoloader --no-interaction
    
    # Generate application key if .env exists
    - cd $DEPLOYPATH && if [ -f .env ]; then /usr/local/bin/php artisan key:generate --force; fi
    
    # Run database migrations (only if .env exists and DB is configured)
    - cd $DEPLOYPATH && if [ -f .env ]; then /usr/local/bin/php artisan migrate --force; fi
    
    # Clear and cache Laravel configurations
    - cd $DEPLOYPATH && /usr/local/bin/php artisan config:cache
    - cd $DEPLOYPATH && /usr/local/bin/php artisan route:cache
    - cd $DEPLOYPATH && /usr/local/bin/php artisan view:cache
    
    # Set proper ownership (adjust if needed)
    - /bin/chown -R dcscom:dcscom $DEPLOYPATH
