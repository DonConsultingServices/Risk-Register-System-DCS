class MobileGestures {constructor() {this.touchStartX = 0;this.touchStartY = 0;this.touchEndX = 0;this.touchEndY = 0;this.minSwipeDistance = 50;this.maxSwipeTime = 300;this.touchStartTime = 0;this.init();}init() {this.bindTouchEvents();this.bindPullToRefresh();this.bindSwipeGestures();this.bindHapticFeedback();this.bindMobileOptimizations();}bindTouchEvents() {const touchElements = document.querySelectorAll('button, .btn, .card, .nav-link, .dropdown-toggle');touchElements.forEach(element => {element.addEventListener('touchstart', (e) => {element.classList.add('touch-active');});element.addEventListener('touchend', (e) => {setTimeout(() => {element.classList.remove('touch-active');}, 150);});element.addEventListener('touchcancel', (e) => {element.classList.remove('touch-active');});});}bindPullToRefresh() {let startY = 0;let currentY = 0;let isPulling = false;let pullDistance = 0;const maxPullDistance = 100;document.addEventListener('touchstart', (e) => {if (window.scrollY === 0) {startY = e.touches[0].clientY;isPulling = true;}});document.addEventListener('touchmove', (e) => {if (isPulling && window.scrollY === 0) {currentY = e.touches[0].clientY;pullDistance = currentY - startY;if (pullDistance > 0) {const target = e.target;const isModalElement = target.closest('.modal') || target.closest('.modal-dialog') || target.closest('.modal-content');const isFormElement = target.closest('form') || target.closest('button') || target.closest('input') || target.closest('textarea');if (!isModalElement && !isFormElement) {e.preventDefault();this.showPullToRefreshIndicator(pullDistance);}}}});document.addEventListener('touchend', (e) => {if (isPulling && pullDistance > this.minSwipeDistance) {this.triggerPullToRefresh();}this.hidePullToRefreshIndicator();isPulling = false;pullDistance = 0;});}bindSwipeGestures() {document.addEventListener('touchstart', (e) => {this.touchStartX = e.touches[0].clientX;this.touchStartY = e.touches[0].clientY;this.touchStartTime = Date.now();});document.addEventListener('touchend', (e) => {this.touchEndX = e.changedTouches[0].clientX;this.touchEndY = e.changedTouches[0].clientY;const swipeDistanceX = this.touchEndX - this.touchStartX;const swipeDistanceY = this.touchEndY - this.touchStartY;const swipeTime = Date.now() - this.touchStartTime;if (Math.abs(swipeDistanceX) > Math.abs(swipeDistanceY) && Math.abs(swipeDistanceX) > this.minSwipeDistance && swipeTime < this.maxSwipeTime) {if (swipeDistanceX > 0) {this.handleSwipeRight();}else {this.handleSwipeLeft();}}if (Math.abs(swipeDistanceY) > Math.abs(swipeDistanceX) && Math.abs(swipeDistanceY) > this.minSwipeDistance && swipeTime < this.maxSwipeTime) {if (swipeDistanceY > 0) {this.handleSwipeDown();}else {this.handleSwipeUp();}}});}bindHapticFeedback() {if ('vibrate' in navigator) {const feedbackElements = document.querySelectorAll('button, .btn, .nav-link, .dropdown-toggle');feedbackElements.forEach(element => {element.addEventListener('touchstart', () => {if (document.hasFocus()) {try {navigator.vibrate(10);}catch (error) {}}});});}}bindMobileOptimizations() {let lastTouchEnd = 0;document.addEventListener('touchend', (e) => {const now = (new Date()).getTime();if (now - lastTouchEnd <= 300) {const target = e.target;const isModalElement = target.closest('.modal') || target.closest('.modal-dialog') || target.closest('.modal-content');const isInteractiveElement = target.closest('button') || target.closest('a') || target.closest('input') || target.closest('textarea') || target.closest('select');if (!isModalElement && !isInteractiveElement) {e.preventDefault();}}lastTouchEnd = now;});let ticking = false;document.addEventListener('scroll', () => {if (!ticking) {requestAnimationFrame(() => {this.handleScroll();ticking = false;});ticking = true;}});window.addEventListener('orientationchange', () => {setTimeout(() => {this.handleOrientationChange();}, 100);});window.addEventListener('resize', () => {this.handleViewportChange();});}showPullToRefreshIndicator(distance) {let indicator = document.getElementById('pull-to-refresh-indicator');if (!indicator) {indicator = this.createPullToRefreshIndicator();}const opacity = Math.min(distance / this.minSwipeDistance, 1);const scale = Math.min(distance / this.minSwipeDistance, 1);indicator.style.opacity = opacity;indicator.style.transform = `scale(${scale})`;indicator.style.display = 'block';}hidePullToRefreshIndicator() {const indicator = document.getElementById('pull-to-refresh-indicator');if (indicator) {indicator.style.display = 'none';}}createPullToRefreshIndicator() {const indicator = document.createElement('div');indicator.id = 'pull-to-refresh-indicator';indicator.innerHTML = '<i class="fas fa-sync-alt fa-spin"></i><br>Pull to refresh';indicator.style.cssText = ` position: fixed;top: 20px;left: 50%;transform: translateX(-50%);background: rgba(0, 7, 45, 0.9);color: white;padding: 10px 20px;border-radius: 20px;font-size: 14px;text-align: center;z-index: 9999;display: none;transition: all 0.3s ease;`;document.body.appendChild(indicator);return indicator;}triggerPullToRefresh() {window.location.reload();}handleSwipeRight() {if (window.history.length > 1) {window.history.back();}}handleSwipeLeft() {if (window.history.length > 1) {window.history.forward();}}handleSwipeDown() {window.scrollTo({top: 0, behavior: 'smooth' });}handleSwipeUp() {window.scrollTo({top: document.body.scrollHeight, behavior: 'smooth' });}handleScroll() {const scrollY = window.scrollY;const header = document.querySelector('.top-bar');if (header) {if (scrollY > 100) {header.classList.add('scrolled');}else {header.classList.remove('scrolled');}}const cards = document.querySelectorAll('.card');cards.forEach((card, index) => {const rect = card.getBoundingClientRect();const speed = 0.5;const yPos = -(rect.top * speed);card.style.transform = `translateY(${yPos}px)`;});}handleOrientationChange() {setTimeout(() => {this.recalculateLayouts();}, 100);}handleViewportChange() {this.recalculateLayouts();}recalculateLayouts() {const tables = document.querySelectorAll('.table-responsive');tables.forEach(table => {table.style.width = '100%';});}}const touchStyles = ` .touch-active {transform: scale(0.95);opacity: 0.8;transition: all 0.1s ease;}.top-bar.scrolled {box-shadow: 0 2px 20px rgba(0,0,0,0.15);backdrop-filter: blur(10px);}@media (max-width: 768px) {.card {transition: transform 0.3s ease;}.card:hover {transform: translateY(-2px);}.btn, .nav-link, .dropdown-toggle {transition: all 0.2s ease;}.btn:active, .nav-link:active, .dropdown-toggle:active {transform: scale(0.95);}}`;const styleSheet = document.createElement('style');styleSheet.textContent = touchStyles;document.head.appendChild(styleSheet);document.addEventListener('DOMContentLoaded', () => {new MobileGestures();});window.MobileGestures = MobileGestures;;
class NotificationSystem {constructor() {this.notifications = [];this.unreadCount = 0;this.soundEnabled = true;this.pollingInterval = null;this.isPolling = false;this.lastNotificationId = 0;this.init();}init() {this.loadNotificationSettings();this.bindEvents();this.startPolling();this.loadInitialNotifications();this.setupSoundSystem();}loadNotificationSettings() {this.soundEnabled = localStorage.getItem('notification_sound_enabled') !== 'false';this.pollingInterval = parseInt(localStorage.getItem('notification_polling_interval')) || 5000;}bindEvents() {this.bindNotificationDropdown();this.bindMarkAsReadEvents();this.bindSoundToggleEvents();this.bindPageVisibilityEvents();this.bindBeforeUnloadEvents();}bindNotificationDropdown() {const dropdown = document.getElementById('notificationDropdown');const mobileDropdown = document.getElementById('mobileNotificationDropdown');if (dropdown) {dropdown.addEventListener('show.bs.dropdown', () => {this.loadNotifications();});}if (mobileDropdown) {mobileDropdown.addEventListener('show.bs.dropdown', () => {this.loadNotifications();});}}bindMarkAsReadEvents() {const markAllReadBtn = document.querySelector('.btn-mark-all-read');if (markAllReadBtn) {markAllReadBtn.addEventListener('click', () => {this.markAllAsRead();});}const clearAllBtn = document.querySelector('.btn-clear-all');if (clearAllBtn) {clearAllBtn.addEventListener('click', () => {this.clearAllNotifications();});}}bindSoundToggleEvents() {this.addSoundToggleButton();}bindPageVisibilityEvents() {document.addEventListener('visibilitychange', () => {if (document.hidden) {this.pausePolling();}else {this.resumePolling();}});}bindBeforeUnloadEvents() {window.addEventListener('beforeunload', () => {this.markUserOffline();});}setupSoundSystem() {this.audioContext = null;this.sounds = {};document.addEventListener('click', () => {if (!this.audioContext) {this.initAudioContext();}}, {once: true });}initAudioContext() {try {this.audioContext = new (window.AudioContext || window.webkitAudioContext)();this.loadNotificationSounds();}catch (e) {console.warn('Audio context not supported:', e);}}loadNotificationSounds() {const soundFiles = {'normal': '/sounds/notifications/normal-notification.mp3', 'high': '/sounds/notifications/high-notification.mp3', 'urgent': '/sounds/notifications/urgent-notification.mp3', 'message': '/sounds/notifications/message-notification.mp3', 'broadcast': '/sounds/notifications/broadcast-notification.mp3' };Object.entries(soundFiles).forEach(([type, url]) => {this.loadSound(type, url);});}loadSound(type, url) {this.sounds[type] = this.createBeepSound(type);}createBeepSound(type) {if (!this.audioContext) return null;const duration = type === 'urgent' ? 0.5 : 0.3;const frequency = type === 'urgent' ? 800 : type === 'high' ? 600 : 400;const sampleRate = this.audioContext.sampleRate;const length = sampleRate * duration;const buffer = this.audioContext.createBuffer(1, length, sampleRate);const data = buffer.getChannelData(0);for (let i = 0;i < length;i++) {data[i] = Math.sin(2 * Math.PI * frequency * i / sampleRate) * 0.3;}return buffer;}playNotificationSound(priority, type) {if (!this.soundEnabled || !this.audioContext) return;const soundType = type === 'message' ? 'message' : type === 'broadcast' ? 'broadcast' : priority;const sound = this.sounds[soundType] || this.sounds['normal'];if (!sound) return;try {const source = this.audioContext.createBufferSource();source.buffer = sound;source.connect(this.audioContext.destination);source.start();}catch (e) {console.warn('Could not play notification sound:', e);}}startPolling() {if (this.isPolling) return;this.isPolling = true;this.pollingInterval = setInterval(() => {this.checkForNewNotifications();}, this.pollingInterval);}pausePolling() {if (this.pollingInterval) {clearInterval(this.pollingInterval);this.isPolling = false;}}resumePolling() {if (!this.isPolling) {this.startPolling();}}async checkForNewNotifications() {try {const response = await fetch('/notifications/unread-count', {headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }});if (response.ok) {const data = await response.json();this.updateUnreadCount(data.count);}}catch (error) {console.warn('Failed to check notifications:', error);}}async loadInitialNotifications() {try {const response = await fetch('/notifications/recent', {headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }});if (response.ok) {const data = await response.json();this.notifications = data.notifications || [];this.updateUnreadCount(data.unread_count || 0);}}catch (error) {console.warn('Failed to load initial notifications:', error);}}async loadNotifications() {try {const response = await fetch('/notifications/recent', {headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }});if (response.ok) {const data = await response.json();this.notifications = data.notifications || [];this.renderNotifications();}}catch (error) {console.warn('Failed to load notifications:', error);}}renderNotifications() {const container = document.getElementById('notification-list');const mobileContainer = document.getElementById('mobile-notification-list');if (!container && !mobileContainer) return;const html = this.notifications.map(notification => this.renderNotificationItem(notification)).join('');if (container) {container.innerHTML = html;}if (mobileContainer) {mobileContainer.innerHTML = html;}}renderNotificationItem(notification) {const icon = this.getNotificationIcon(notification.type);const color = this.getNotificationColor(notification.priority);const timeAgo = this.getTimeAgo(notification.created_at);const isUnread = !notification.read;return ` <div class="notification-item ${isUnread ? 'unread' : ''}" data-id="${notification.id}"> <div class="notification-icon" style="color: ${color}"> <i class="${icon}"></i> </div> <div class="notification-content"> <div class="notification-title">${notification.title}</div> <div class="notification-message">${notification.message}</div> <div class="notification-time">${timeAgo}</div> </div> <div class="notification-actions"> ${isUnread ? `<button class="btn-mark-read" onclick="notificationSystem.markAsRead(${notification.id})" title="Mark as read"> <i class="fas fa-check"></i> </button>` : ''}<button class="btn-delete-notification" onclick="notificationSystem.deleteNotification(${notification.id})" title="Delete"> <i class="fas fa-trash"></i> </button> </div> </div> `;}getNotificationIcon(type) {const icons = {'message': 'fas fa-envelope', 'broadcast': 'fas fa-bullhorn', 'risk': 'fas fa-exclamation-triangle', 'approval': 'fas fa-check-circle', 'system': 'fas fa-cog', 'client': 'fas fa-user' };return icons[type] || 'fas fa-bell';}getNotificationColor(priority) {const colors = {'urgent': '#dc3545', 'high': '#fd7e14', 'normal': '#0d6efd', 'low': '#6c757d' };return colors[priority] || '#0d6efd';}getTimeAgo(dateString) {const date = new Date(dateString);const now = new Date();const diffInSeconds = Math.floor((now - date) / 1000);if (diffInSeconds < 60) return 'Just now';if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;return `${Math.floor(diffInSeconds / 86400)}d ago`;}updateUnreadCount(count) {this.unreadCount = count;const badge = document.getElementById('notification-count');if (badge) {badge.textContent = count;badge.style.display = count > 0 ? 'block' : 'none';}const mobileBadge = document.getElementById('mobile-notification-count');if (mobileBadge) {mobileBadge.textContent = count;mobileBadge.style.display = count > 0 ? 'block' : 'none';}if (count > 0) {document.title = `(${count}) ${document.title.replace(/^\(\d+\)\s*/, '')}`;}else {document.title = document.title.replace(/^\(\d+\)\s*/, '');}}async markAsRead(notificationId) {try {const response = await fetch(`/notifications/${notificationId}/mark-read`, {method: 'POST', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }});if (response.ok) {const notification = this.notifications.find(n => n.id === notificationId);if (notification) {notification.read = true;notification.read_at = new Date().toISOString();}this.renderNotifications();this.updateUnreadCount(Math.max(0, this.unreadCount - 1));}}catch (error) {console.warn('Failed to mark notification as read:', error);}}async markAllAsRead() {try {const response = await fetch('/notifications/mark-all-read', {method: 'POST', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }});if (response.ok) {this.notifications.forEach(notification => {notification.read = true;notification.read_at = new Date().toISOString();});this.renderNotifications();this.updateUnreadCount(0);}}catch (error) {console.warn('Failed to mark all notifications as read:', error);}}async deleteNotification(notificationId) {try {const response = await fetch(`/notifications/${notificationId}`, {method: 'DELETE', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }});if (response.ok) {this.notifications = this.notifications.filter(n => n.id !== notificationId);this.renderNotifications();const unreadCount = this.notifications.filter(n => !n.read).length;this.updateUnreadCount(unreadCount);}}catch (error) {console.warn('Failed to delete notification:', error);}}async clearAllNotifications() {try {const response = await fetch('/notifications/clear-all', {method: 'DELETE', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }});if (response.ok) {this.notifications = [];this.renderNotifications();this.updateUnreadCount(0);}}catch (error) {console.warn('Failed to clear all notifications:', error);}}addSoundToggleButton() {const notificationHeader = document.querySelector('.notification-header');if (!notificationHeader) return;const soundToggle = document.createElement('button');soundToggle.className = 'btn-sound-toggle';soundToggle.innerHTML = `<i class="fas ${this.soundEnabled ? 'fa-volume-up' : 'fa-volume-mute'}"></i>`;soundToggle.title = this.soundEnabled ? 'Disable sounds' : 'Enable sounds';soundToggle.onclick = () => this.toggleSound();const actions = notificationHeader.querySelector('.notification-actions');if (actions) {actions.appendChild(soundToggle);}}toggleSound() {this.soundEnabled = !this.soundEnabled;localStorage.setItem('notification_sound_enabled', this.soundEnabled);const button = document.querySelector('.btn-sound-toggle');if (button) {button.innerHTML = `<i class="fas ${this.soundEnabled ? 'fa-volume-up' : 'fa-volume-mute'}"></i>`;button.title = this.soundEnabled ? 'Disable sounds' : 'Enable sounds';}}async markUserOffline() {try {await fetch('/user-activity/offline', {method: 'POST', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content') }});}catch (error) {console.warn('Failed to mark user offline:', error);}}createTestNotification(type = 'message', priority = 'normal') {const testNotification = {id: Date.now(), type: type, title: 'Test Notification', message: 'This is a test notification', priority: priority, read: false, created_at: new Date().toISOString() };this.notifications.unshift(testNotification);this.renderNotifications();this.updateUnreadCount(this.unreadCount + 1);this.playNotificationSound(priority, type);}}document.addEventListener('DOMContentLoaded', () => {window.notificationSystem = new NotificationSystem();});window.NotificationSystem = NotificationSystem;;
class OnlineStatusSystem {constructor() {this.isOnline = true;this.lastActivity = Date.now();this.activityTimeout = null;this.heartbeatInterval = null;this.heartbeatIntervalMs = 30000;this.lastUpdateSent = 0;this.updateThrottleMs = 10000;this.pendingUpdate = false;this.updateQueue = [];this.init();}init() {this.bindActivityEvents();this.startHeartbeat();this.updateUserActivity();}bindActivityEvents() {const events = ['mousedown', 'keypress', 'touchstart', 'click'];events.forEach(event => {document.addEventListener(event, (e) => {const target = e.target;const isModalElement = target.closest('.modal') || target.closest('.modal-dialog') || target.closest('.modal-content');if (!isModalElement) {this.updateUserActivity();}}, false);});let scrollTimeout;document.addEventListener('scroll', () => {clearTimeout(scrollTimeout);scrollTimeout = setTimeout(() => {this.updateUserActivity();}, 2000);}, false);let mouseTimeout;document.addEventListener('mousemove', () => {clearTimeout(mouseTimeout);mouseTimeout = setTimeout(() => {this.updateUserActivity();}, 5000);}, false);document.addEventListener('visibilitychange', () => {if (document.hidden) {this.handlePageHidden();}else {this.handlePageVisible();}});window.addEventListener('beforeunload', () => {this.markUserOffline();});}updateUserActivity() {this.lastActivity = Date.now();if (this.activityTimeout) {clearTimeout(this.activityTimeout);}this.activityTimeout = setTimeout(() => {this.markUserOffline();}, 5 * 60 * 1000);this.throttledSendActivityUpdate();}throttledSendActivityUpdate() {const now = Date.now();if (now - this.lastUpdateSent < this.updateThrottleMs) {return;}if (this.pendingUpdate) {return;}this.sendActivityUpdate();}async sendActivityUpdate() {if (!this.isUserAuthenticated()) {return;}this.pendingUpdate = true;try {const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');if (!csrfToken) {console.warn('CSRF token not found, skipping activity update');this.pendingUpdate = false;return;}const response = await fetch('/user-activity/update', {method: 'POST', headers: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': csrfToken }, body: JSON.stringify({activity_type: 'page_view', page_url: window.location.href }), signal: AbortSignal.timeout(5000) });if (!response.ok) {if (response.status === 401 || response.status === 403) {this.isOnline = false;this.pendingUpdate = false;return;}if (response.status >= 500) {this.updateThrottleMs = 30000;setTimeout(() => {this.updateThrottleMs = 10000;}, 60000);}if (Math.random() < 0.1) {console.warn(`Activity update failed (${response.status})`);}this.pendingUpdate = false;return;}this.lastUpdateSent = Date.now();this.pendingUpdate = false;}catch (error) {this.pendingUpdate = false;if (error.name === 'AbortError') {this.updateThrottleMs = 30000;setTimeout(() => {this.updateThrottleMs = 10000;}, 60000);return;}if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {this.updateThrottleMs = 30000;setTimeout(() => {this.updateThrottleMs = 10000;}, 60000);return;}if (Math.random() < 0.05) {console.warn('Failed to update user activity:', error.message);}}}startHeartbeat() {this.heartbeatInterval = setInterval(() => {if (this.isOnline && !this.pendingUpdate) {this.sendActivityUpdate();}}, this.heartbeatIntervalMs);}handlePageHidden() {if (this.heartbeatInterval) {clearInterval(this.heartbeatInterval);this.heartbeatInterval = setInterval(() => {this.sendActivityUpdate();}, 60000);}}handlePageVisible() {this.updateUserActivity();if (this.heartbeatInterval) {clearInterval(this.heartbeatInterval);this.startHeartbeat();}}async markUserOffline() {if (!this.isOnline || !this.isUserAuthenticated()) return;this.isOnline = false;try {await fetch('/user-activity/offline', {method: 'POST', headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest', 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '' }});}catch (error) {console.warn('Failed to mark user offline:', error);}}isUserAuthenticated() {const authRequiredPages = ['/dashboard', '/clients', '/risks', '/messages', '/notifications', '/profile'];const currentPath = window.location.pathname;if (!authRequiredPages.some(page => currentPath.startsWith(page))) {return false;}const csrfToken = document.querySelector('meta[name="csrf-token"]');return csrfToken !== null;}async getUserOnlineStatus(userId) {if (!this.isUserAuthenticated()) return null;try {const response = await fetch(`/user-activity/status/${userId}`, {headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }});if (response.ok) {const data = await response.json();return data;}}catch (error) {console.warn('Failed to get user online status:', error);}return null;}async getOnlineUsers() {if (!this.isUserAuthenticated()) return [];try {const response = await fetch('/user-activity/online-users', {headers: {'Accept': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }});if (response.ok) {const data = await response.json();return data.users || [];}}catch (error) {console.warn('Failed to get online users:', error);}return [];}renderOnlineStatus(userId, status) {const indicator = document.querySelector(`[data-user-id="${userId}"] .online-status`);if (!indicator) return;const statusText = status.is_online ? 'Online' : status.status_text || 'Offline';const statusColor = status.is_online ? '#28a745' : status.color || '#6c757d';indicator.innerHTML = ` <span class="status-dot" style="background-color: ${statusColor}"></span> <span class="status-text">${statusText}</span> `;}async updateOnlineStatuses() {const onlineUsers = await this.getOnlineUsers();onlineUsers.forEach(user => {this.renderOnlineStatus(user.id, {is_online: user.is_online, status_text: user.status_text, color: user.status_color });});}startStatusUpdates() {setInterval(() => {this.updateOnlineStatuses();}, 30000);}}document.addEventListener('DOMContentLoaded', () => {window.onlineStatusSystem = new OnlineStatusSystem();if (window.location.pathname.includes('/messages')) {window.onlineStatusSystem.startStatusUpdates();}});window.OnlineStatusSystem = OnlineStatusSystem;;
